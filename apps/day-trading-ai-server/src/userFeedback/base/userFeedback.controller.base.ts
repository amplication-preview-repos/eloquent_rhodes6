/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserFeedbackService } from "../userFeedback.service";
import { UserFeedbackCreateInput } from "./UserFeedbackCreateInput";
import { UserFeedback } from "./UserFeedback";
import { UserFeedbackFindManyArgs } from "./UserFeedbackFindManyArgs";
import { UserFeedbackWhereUniqueInput } from "./UserFeedbackWhereUniqueInput";
import { UserFeedbackUpdateInput } from "./UserFeedbackUpdateInput";

export class UserFeedbackControllerBase {
  constructor(protected readonly service: UserFeedbackService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserFeedback })
  async createUserFeedback(
    @common.Body() data: UserFeedbackCreateInput
  ): Promise<UserFeedback> {
    return await this.service.createUserFeedback({
      data: data,
      select: {
        createdAt: true,
        feedbackText: true,
        id: true,
        rating: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserFeedback] })
  @ApiNestedQuery(UserFeedbackFindManyArgs)
  async userFeedbacks(@common.Req() request: Request): Promise<UserFeedback[]> {
    const args = plainToClass(UserFeedbackFindManyArgs, request.query);
    return this.service.userFeedbacks({
      ...args,
      select: {
        createdAt: true,
        feedbackText: true,
        id: true,
        rating: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserFeedback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userFeedback(
    @common.Param() params: UserFeedbackWhereUniqueInput
  ): Promise<UserFeedback | null> {
    const result = await this.service.userFeedback({
      where: params,
      select: {
        createdAt: true,
        feedbackText: true,
        id: true,
        rating: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserFeedback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserFeedback(
    @common.Param() params: UserFeedbackWhereUniqueInput,
    @common.Body() data: UserFeedbackUpdateInput
  ): Promise<UserFeedback | null> {
    try {
      return await this.service.updateUserFeedback({
        where: params,
        data: data,
        select: {
          createdAt: true,
          feedbackText: true,
          id: true,
          rating: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserFeedback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserFeedback(
    @common.Param() params: UserFeedbackWhereUniqueInput
  ): Promise<UserFeedback | null> {
    try {
      return await this.service.deleteUserFeedback({
        where: params,
        select: {
          createdAt: true,
          feedbackText: true,
          id: true,
          rating: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
