/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserFeedback as PrismaUserFeedback } from "@prisma/client";

export class UserFeedbackServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserFeedbackCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userFeedback.count(args);
  }

  async userFeedbacks(
    args: Prisma.UserFeedbackFindManyArgs
  ): Promise<PrismaUserFeedback[]> {
    return this.prisma.userFeedback.findMany(args);
  }
  async userFeedback(
    args: Prisma.UserFeedbackFindUniqueArgs
  ): Promise<PrismaUserFeedback | null> {
    return this.prisma.userFeedback.findUnique(args);
  }
  async createUserFeedback(
    args: Prisma.UserFeedbackCreateArgs
  ): Promise<PrismaUserFeedback> {
    return this.prisma.userFeedback.create(args);
  }
  async updateUserFeedback(
    args: Prisma.UserFeedbackUpdateArgs
  ): Promise<PrismaUserFeedback> {
    return this.prisma.userFeedback.update(args);
  }
  async deleteUserFeedback(
    args: Prisma.UserFeedbackDeleteArgs
  ): Promise<PrismaUserFeedback> {
    return this.prisma.userFeedback.delete(args);
  }
}
