/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TradingPositionService } from "../tradingPosition.service";
import { TradingPositionCreateInput } from "./TradingPositionCreateInput";
import { TradingPosition } from "./TradingPosition";
import { TradingPositionFindManyArgs } from "./TradingPositionFindManyArgs";
import { TradingPositionWhereUniqueInput } from "./TradingPositionWhereUniqueInput";
import { TradingPositionUpdateInput } from "./TradingPositionUpdateInput";

export class TradingPositionControllerBase {
  constructor(protected readonly service: TradingPositionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TradingPosition })
  async createTradingPosition(
    @common.Body() data: TradingPositionCreateInput
  ): Promise<TradingPosition> {
    return await this.service.createTradingPosition({
      data: data,
      select: {
        createdAt: true,
        entryPrice: true,
        exitPrice: true,
        id: true,
        quantity: true,
        status: true,
        symbolField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TradingPosition] })
  @ApiNestedQuery(TradingPositionFindManyArgs)
  async tradingPositions(
    @common.Req() request: Request
  ): Promise<TradingPosition[]> {
    const args = plainToClass(TradingPositionFindManyArgs, request.query);
    return this.service.tradingPositions({
      ...args,
      select: {
        createdAt: true,
        entryPrice: true,
        exitPrice: true,
        id: true,
        quantity: true,
        status: true,
        symbolField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TradingPosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tradingPosition(
    @common.Param() params: TradingPositionWhereUniqueInput
  ): Promise<TradingPosition | null> {
    const result = await this.service.tradingPosition({
      where: params,
      select: {
        createdAt: true,
        entryPrice: true,
        exitPrice: true,
        id: true,
        quantity: true,
        status: true,
        symbolField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TradingPosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTradingPosition(
    @common.Param() params: TradingPositionWhereUniqueInput,
    @common.Body() data: TradingPositionUpdateInput
  ): Promise<TradingPosition | null> {
    try {
      return await this.service.updateTradingPosition({
        where: params,
        data: data,
        select: {
          createdAt: true,
          entryPrice: true,
          exitPrice: true,
          id: true,
          quantity: true,
          status: true,
          symbolField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TradingPosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTradingPosition(
    @common.Param() params: TradingPositionWhereUniqueInput
  ): Promise<TradingPosition | null> {
    try {
      return await this.service.deleteTradingPosition({
        where: params,
        select: {
          createdAt: true,
          entryPrice: true,
          exitPrice: true,
          id: true,
          quantity: true,
          status: true,
          symbolField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
