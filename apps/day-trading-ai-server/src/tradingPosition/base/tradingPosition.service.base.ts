/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TradingPosition as PrismaTradingPosition,
} from "@prisma/client";

export class TradingPositionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TradingPositionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tradingPosition.count(args);
  }

  async tradingPositions(
    args: Prisma.TradingPositionFindManyArgs
  ): Promise<PrismaTradingPosition[]> {
    return this.prisma.tradingPosition.findMany(args);
  }
  async tradingPosition(
    args: Prisma.TradingPositionFindUniqueArgs
  ): Promise<PrismaTradingPosition | null> {
    return this.prisma.tradingPosition.findUnique(args);
  }
  async createTradingPosition(
    args: Prisma.TradingPositionCreateArgs
  ): Promise<PrismaTradingPosition> {
    return this.prisma.tradingPosition.create(args);
  }
  async updateTradingPosition(
    args: Prisma.TradingPositionUpdateArgs
  ): Promise<PrismaTradingPosition> {
    return this.prisma.tradingPosition.update(args);
  }
  async deleteTradingPosition(
    args: Prisma.TradingPositionDeleteArgs
  ): Promise<PrismaTradingPosition> {
    return this.prisma.tradingPosition.delete(args);
  }
}
