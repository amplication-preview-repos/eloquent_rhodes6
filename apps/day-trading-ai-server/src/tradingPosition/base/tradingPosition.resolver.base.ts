/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TradingPosition } from "./TradingPosition";
import { TradingPositionCountArgs } from "./TradingPositionCountArgs";
import { TradingPositionFindManyArgs } from "./TradingPositionFindManyArgs";
import { TradingPositionFindUniqueArgs } from "./TradingPositionFindUniqueArgs";
import { CreateTradingPositionArgs } from "./CreateTradingPositionArgs";
import { UpdateTradingPositionArgs } from "./UpdateTradingPositionArgs";
import { DeleteTradingPositionArgs } from "./DeleteTradingPositionArgs";
import { TradingPositionService } from "../tradingPosition.service";
@graphql.Resolver(() => TradingPosition)
export class TradingPositionResolverBase {
  constructor(protected readonly service: TradingPositionService) {}

  async _tradingPositionsMeta(
    @graphql.Args() args: TradingPositionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TradingPosition])
  async tradingPositions(
    @graphql.Args() args: TradingPositionFindManyArgs
  ): Promise<TradingPosition[]> {
    return this.service.tradingPositions(args);
  }

  @graphql.Query(() => TradingPosition, { nullable: true })
  async tradingPosition(
    @graphql.Args() args: TradingPositionFindUniqueArgs
  ): Promise<TradingPosition | null> {
    const result = await this.service.tradingPosition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TradingPosition)
  async createTradingPosition(
    @graphql.Args() args: CreateTradingPositionArgs
  ): Promise<TradingPosition> {
    return await this.service.createTradingPosition({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TradingPosition)
  async updateTradingPosition(
    @graphql.Args() args: UpdateTradingPositionArgs
  ): Promise<TradingPosition | null> {
    try {
      return await this.service.updateTradingPosition({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TradingPosition)
  async deleteTradingPosition(
    @graphql.Args() args: DeleteTradingPositionArgs
  ): Promise<TradingPosition | null> {
    try {
      return await this.service.deleteTradingPosition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
