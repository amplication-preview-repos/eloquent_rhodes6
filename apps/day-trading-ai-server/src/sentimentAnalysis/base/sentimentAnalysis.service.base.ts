/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SentimentAnalysis as PrismaSentimentAnalysis,
} from "@prisma/client";

export class SentimentAnalysisServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SentimentAnalysisCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sentimentAnalysis.count(args);
  }

  async sentimentAnalyses(
    args: Prisma.SentimentAnalysisFindManyArgs
  ): Promise<PrismaSentimentAnalysis[]> {
    return this.prisma.sentimentAnalysis.findMany(args);
  }
  async sentimentAnalysis(
    args: Prisma.SentimentAnalysisFindUniqueArgs
  ): Promise<PrismaSentimentAnalysis | null> {
    return this.prisma.sentimentAnalysis.findUnique(args);
  }
  async createSentimentAnalysis(
    args: Prisma.SentimentAnalysisCreateArgs
  ): Promise<PrismaSentimentAnalysis> {
    return this.prisma.sentimentAnalysis.create(args);
  }
  async updateSentimentAnalysis(
    args: Prisma.SentimentAnalysisUpdateArgs
  ): Promise<PrismaSentimentAnalysis> {
    return this.prisma.sentimentAnalysis.update(args);
  }
  async deleteSentimentAnalysis(
    args: Prisma.SentimentAnalysisDeleteArgs
  ): Promise<PrismaSentimentAnalysis> {
    return this.prisma.sentimentAnalysis.delete(args);
  }
}
