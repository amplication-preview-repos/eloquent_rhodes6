/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TradingScenarioService } from "../tradingScenario.service";
import { TradingScenarioCreateInput } from "./TradingScenarioCreateInput";
import { TradingScenario } from "./TradingScenario";
import { TradingScenarioFindManyArgs } from "./TradingScenarioFindManyArgs";
import { TradingScenarioWhereUniqueInput } from "./TradingScenarioWhereUniqueInput";
import { TradingScenarioUpdateInput } from "./TradingScenarioUpdateInput";

export class TradingScenarioControllerBase {
  constructor(protected readonly service: TradingScenarioService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TradingScenario })
  async createTradingScenario(
    @common.Body() data: TradingScenarioCreateInput
  ): Promise<TradingScenario> {
    return await this.service.createTradingScenario({
      data: {
        ...data,

        marketScan: data.marketScan
          ? {
              connect: data.marketScan,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,

        marketScan: {
          select: {
            id: true,
          },
        },

        scenarioName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TradingScenario] })
  @ApiNestedQuery(TradingScenarioFindManyArgs)
  async tradingScenarios(
    @common.Req() request: Request
  ): Promise<TradingScenario[]> {
    const args = plainToClass(TradingScenarioFindManyArgs, request.query);
    return this.service.tradingScenarios({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,

        marketScan: {
          select: {
            id: true,
          },
        },

        scenarioName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TradingScenario })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tradingScenario(
    @common.Param() params: TradingScenarioWhereUniqueInput
  ): Promise<TradingScenario | null> {
    const result = await this.service.tradingScenario({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,

        marketScan: {
          select: {
            id: true,
          },
        },

        scenarioName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TradingScenario })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTradingScenario(
    @common.Param() params: TradingScenarioWhereUniqueInput,
    @common.Body() data: TradingScenarioUpdateInput
  ): Promise<TradingScenario | null> {
    try {
      return await this.service.updateTradingScenario({
        where: params,
        data: {
          ...data,

          marketScan: data.marketScan
            ? {
                connect: data.marketScan,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,

          marketScan: {
            select: {
              id: true,
            },
          },

          scenarioName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TradingScenario })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTradingScenario(
    @common.Param() params: TradingScenarioWhereUniqueInput
  ): Promise<TradingScenario | null> {
    try {
      return await this.service.deleteTradingScenario({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,

          marketScan: {
            select: {
              id: true,
            },
          },

          scenarioName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
