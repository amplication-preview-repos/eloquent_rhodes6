/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TradingScenario } from "./TradingScenario";
import { TradingScenarioCountArgs } from "./TradingScenarioCountArgs";
import { TradingScenarioFindManyArgs } from "./TradingScenarioFindManyArgs";
import { TradingScenarioFindUniqueArgs } from "./TradingScenarioFindUniqueArgs";
import { CreateTradingScenarioArgs } from "./CreateTradingScenarioArgs";
import { UpdateTradingScenarioArgs } from "./UpdateTradingScenarioArgs";
import { DeleteTradingScenarioArgs } from "./DeleteTradingScenarioArgs";
import { MarketScan } from "../../marketScan/base/MarketScan";
import { TradingScenarioService } from "../tradingScenario.service";
@graphql.Resolver(() => TradingScenario)
export class TradingScenarioResolverBase {
  constructor(protected readonly service: TradingScenarioService) {}

  async _tradingScenariosMeta(
    @graphql.Args() args: TradingScenarioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TradingScenario])
  async tradingScenarios(
    @graphql.Args() args: TradingScenarioFindManyArgs
  ): Promise<TradingScenario[]> {
    return this.service.tradingScenarios(args);
  }

  @graphql.Query(() => TradingScenario, { nullable: true })
  async tradingScenario(
    @graphql.Args() args: TradingScenarioFindUniqueArgs
  ): Promise<TradingScenario | null> {
    const result = await this.service.tradingScenario(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TradingScenario)
  async createTradingScenario(
    @graphql.Args() args: CreateTradingScenarioArgs
  ): Promise<TradingScenario> {
    return await this.service.createTradingScenario({
      ...args,
      data: {
        ...args.data,

        marketScan: args.data.marketScan
          ? {
              connect: args.data.marketScan,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TradingScenario)
  async updateTradingScenario(
    @graphql.Args() args: UpdateTradingScenarioArgs
  ): Promise<TradingScenario | null> {
    try {
      return await this.service.updateTradingScenario({
        ...args,
        data: {
          ...args.data,

          marketScan: args.data.marketScan
            ? {
                connect: args.data.marketScan,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TradingScenario)
  async deleteTradingScenario(
    @graphql.Args() args: DeleteTradingScenarioArgs
  ): Promise<TradingScenario | null> {
    try {
      return await this.service.deleteTradingScenario(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => MarketScan, {
    nullable: true,
    name: "marketScan",
  })
  async getMarketScan(
    @graphql.Parent() parent: TradingScenario
  ): Promise<MarketScan | null> {
    const result = await this.service.getMarketScan(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
