/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MarketScanService } from "../marketScan.service";
import { MarketScanCreateInput } from "./MarketScanCreateInput";
import { MarketScan } from "./MarketScan";
import { MarketScanFindManyArgs } from "./MarketScanFindManyArgs";
import { MarketScanWhereUniqueInput } from "./MarketScanWhereUniqueInput";
import { MarketScanUpdateInput } from "./MarketScanUpdateInput";
import { TradingScenarioFindManyArgs } from "../../tradingScenario/base/TradingScenarioFindManyArgs";
import { TradingScenario } from "../../tradingScenario/base/TradingScenario";
import { TradingScenarioWhereUniqueInput } from "../../tradingScenario/base/TradingScenarioWhereUniqueInput";

export class MarketScanControllerBase {
  constructor(protected readonly service: MarketScanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MarketScan })
  async createMarketScan(
    @common.Body() data: MarketScanCreateInput
  ): Promise<MarketScan> {
    return await this.service.createMarketScan({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        scanDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MarketScan] })
  @ApiNestedQuery(MarketScanFindManyArgs)
  async marketScans(@common.Req() request: Request): Promise<MarketScan[]> {
    const args = plainToClass(MarketScanFindManyArgs, request.query);
    return this.service.marketScans({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        scanDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MarketScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async marketScan(
    @common.Param() params: MarketScanWhereUniqueInput
  ): Promise<MarketScan | null> {
    const result = await this.service.marketScan({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        scanDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MarketScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMarketScan(
    @common.Param() params: MarketScanWhereUniqueInput,
    @common.Body() data: MarketScanUpdateInput
  ): Promise<MarketScan | null> {
    try {
      return await this.service.updateMarketScan({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          scanDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MarketScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMarketScan(
    @common.Param() params: MarketScanWhereUniqueInput
  ): Promise<MarketScan | null> {
    try {
      return await this.service.deleteMarketScan({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          scanDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/tradingScenarios")
  @ApiNestedQuery(TradingScenarioFindManyArgs)
  async findTradingScenarios(
    @common.Req() request: Request,
    @common.Param() params: MarketScanWhereUniqueInput
  ): Promise<TradingScenario[]> {
    const query = plainToClass(TradingScenarioFindManyArgs, request.query);
    const results = await this.service.findTradingScenarios(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        marketScan: {
          select: {
            id: true,
          },
        },

        scenarioName: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tradingScenarios")
  async connectTradingScenarios(
    @common.Param() params: MarketScanWhereUniqueInput,
    @common.Body() body: TradingScenarioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tradingScenarios: {
        connect: body,
      },
    };
    await this.service.updateMarketScan({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tradingScenarios")
  async updateTradingScenarios(
    @common.Param() params: MarketScanWhereUniqueInput,
    @common.Body() body: TradingScenarioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tradingScenarios: {
        set: body,
      },
    };
    await this.service.updateMarketScan({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tradingScenarios")
  async disconnectTradingScenarios(
    @common.Param() params: MarketScanWhereUniqueInput,
    @common.Body() body: TradingScenarioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tradingScenarios: {
        disconnect: body,
      },
    };
    await this.service.updateMarketScan({
      where: params,
      data,
      select: { id: true },
    });
  }
}
