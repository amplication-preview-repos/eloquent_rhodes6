/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MarketScan } from "./MarketScan";
import { MarketScanCountArgs } from "./MarketScanCountArgs";
import { MarketScanFindManyArgs } from "./MarketScanFindManyArgs";
import { MarketScanFindUniqueArgs } from "./MarketScanFindUniqueArgs";
import { CreateMarketScanArgs } from "./CreateMarketScanArgs";
import { UpdateMarketScanArgs } from "./UpdateMarketScanArgs";
import { DeleteMarketScanArgs } from "./DeleteMarketScanArgs";
import { TradingScenarioFindManyArgs } from "../../tradingScenario/base/TradingScenarioFindManyArgs";
import { TradingScenario } from "../../tradingScenario/base/TradingScenario";
import { MarketScanService } from "../marketScan.service";
@graphql.Resolver(() => MarketScan)
export class MarketScanResolverBase {
  constructor(protected readonly service: MarketScanService) {}

  async _marketScansMeta(
    @graphql.Args() args: MarketScanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MarketScan])
  async marketScans(
    @graphql.Args() args: MarketScanFindManyArgs
  ): Promise<MarketScan[]> {
    return this.service.marketScans(args);
  }

  @graphql.Query(() => MarketScan, { nullable: true })
  async marketScan(
    @graphql.Args() args: MarketScanFindUniqueArgs
  ): Promise<MarketScan | null> {
    const result = await this.service.marketScan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MarketScan)
  async createMarketScan(
    @graphql.Args() args: CreateMarketScanArgs
  ): Promise<MarketScan> {
    return await this.service.createMarketScan({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MarketScan)
  async updateMarketScan(
    @graphql.Args() args: UpdateMarketScanArgs
  ): Promise<MarketScan | null> {
    try {
      return await this.service.updateMarketScan({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MarketScan)
  async deleteMarketScan(
    @graphql.Args() args: DeleteMarketScanArgs
  ): Promise<MarketScan | null> {
    try {
      return await this.service.deleteMarketScan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TradingScenario], { name: "tradingScenarios" })
  async findTradingScenarios(
    @graphql.Parent() parent: MarketScan,
    @graphql.Args() args: TradingScenarioFindManyArgs
  ): Promise<TradingScenario[]> {
    const results = await this.service.findTradingScenarios(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
