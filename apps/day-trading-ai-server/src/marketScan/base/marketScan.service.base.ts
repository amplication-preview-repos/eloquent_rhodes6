/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MarketScan as PrismaMarketScan,
  TradingScenario as PrismaTradingScenario,
} from "@prisma/client";

export class MarketScanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MarketScanCountArgs, "select">
  ): Promise<number> {
    return this.prisma.marketScan.count(args);
  }

  async marketScans(
    args: Prisma.MarketScanFindManyArgs
  ): Promise<PrismaMarketScan[]> {
    return this.prisma.marketScan.findMany(args);
  }
  async marketScan(
    args: Prisma.MarketScanFindUniqueArgs
  ): Promise<PrismaMarketScan | null> {
    return this.prisma.marketScan.findUnique(args);
  }
  async createMarketScan(
    args: Prisma.MarketScanCreateArgs
  ): Promise<PrismaMarketScan> {
    return this.prisma.marketScan.create(args);
  }
  async updateMarketScan(
    args: Prisma.MarketScanUpdateArgs
  ): Promise<PrismaMarketScan> {
    return this.prisma.marketScan.update(args);
  }
  async deleteMarketScan(
    args: Prisma.MarketScanDeleteArgs
  ): Promise<PrismaMarketScan> {
    return this.prisma.marketScan.delete(args);
  }

  async findTradingScenarios(
    parentId: string,
    args: Prisma.TradingScenarioFindManyArgs
  ): Promise<PrismaTradingScenario[]> {
    return this.prisma.marketScan
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tradingScenarios(args);
  }
}
